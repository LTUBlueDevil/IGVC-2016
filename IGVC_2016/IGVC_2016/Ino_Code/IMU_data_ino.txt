#include<Wire.h>

#define    MPU9250_ADDRESS            0b1101000 //0x68
#define    MAG_ADDRESS                0x0C

#define    GYRO_FULL_SCALE_250_DPS    0x00
#define    GYRO_FULL_SCALE_500_DPS    0x08
#define    GYRO_FULL_SCALE_1000_DPS   0x10
#define    GYRO_FULL_SCALE_2000_DPS   0x18

#define    ACC_FULL_SCALE_2_G        0x00
#define    ACC_FULL_SCALE_4_G        0x08
#define    ACC_FULL_SCALE_8_G        0x10
#define    ACC_FULL_SCALE_16_G       0x18

// This function read Nbytes bytes from I2C device at address Address.
// Put read bytes starting at register Register in the Data array.
void I2Cread(uint8_t Address, uint8_t Register, uint8_t Nbytes, uint8_t* Data)
{
  // Set register address
  Wire.beginTransmission(Address);
  Wire.write(Register);
  Wire.endTransmission();

  // Read Nbytes
  Wire.requestFrom(Address, Nbytes);
  uint8_t index = 0;
  while (Wire.available())
    Data[index++] = Wire.read();

}

// Write a byte (Data) in device (Address) at register (Register)
void I2CwriteByte(uint8_t Address, uint8_t Register, uint8_t Data)
{
  // Set register address
  Wire.beginTransmission(Address);
  Wire.write(Register);
  Wire.write(Data);
  Wire.endTransmission();
}

int Status;
int16_t _ax, _ay, _az = 0;
int16_t _gx, _gy, _gz = 0;
int16_t _mx, _my, _mz = 0;

void setup()
{
  Serial.begin(115200);
  //Serial.println("Computer to Arduino has Begun");

  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  Serial1.begin(9600);
  //Serial.println("GPS has begun");

  Wire.begin();
  //Serial.println("9dof has begun");

  // Configure gyroscope range
  I2CwriteByte(MPU9250_ADDRESS, 27, GYRO_FULL_SCALE_2000_DPS);

  // Configure accelerometers range
  I2CwriteByte(MPU9250_ADDRESS, 28, ACC_FULL_SCALE_16_G);

  // Set by pass mode for the magnetometers
  I2CwriteByte(MPU9250_ADDRESS, 0x37, 0x02);

  // Request first magnetometer single measurement
  //(changed to 0x02 from 0x01 for continous measurement mode)
  I2CwriteByte(MAG_ADDRESS, 0x0A, 0x02);

  Status = false;
  delay(1000);
}

void loop()                     // run over and over again
{
  //collect IMU data for position and report to computer
  RunIMU_Loop();//complete

  //retrieve angle from Computer and control 4 motors for steering
  SetMotorPosition();//unfinished

  //retrieve speed from computer and set speed for drive motors
  SetMotorSpeed();//unfinished
}

void RunIMU_Loop()
{
    if (Serial.available() > 0)
  {
    Status = Serial.read();
  }

  if(Serial.available() >5)
  {
    Serial.flush();
  }

  //GPS Data
  String NEMA;

  if (Serial1.available() > 20)
  {
    NEMA = Serial1.readStringUntil('\n');
    Serial1.flush();
  }

  //9dof module
  // ____________________________________
  // :::  accelerometer and gyroscope :::

  // Read accelerometer and gyroscope
  uint8_t Buf[14];

  //0x3B is start of data
  //disregard Buf[6] and Buf[7]. Do not need data
  I2Cread(MPU9250_ADDRESS, 0x3B, 14, Buf);

  // Create 16 bits values from 8 bits data
  int16_t ax = (Buf[0] << 8 | Buf[1]) - _ax;
  int16_t ay = (Buf[2] << 8 | Buf[3]) - _ay;
  int16_t az = (Buf[4] << 8 | Buf[5]) - _az;

  // Gyroscope
  int16_t gx = (Buf[8] << 8 | Buf[9]) - _gx;
  int16_t gy = (Buf[10] << 8 | Buf[11]) - _gy;
  int16_t gz = (Buf[12] << 8 | Buf[13]) - _gz;

  // Display values
  // Accelerometer
  String accel = "$ACCEL,Ax," + String(ax) + ",Ay," + String(ay) + ",Az," + String(az);

  // Gyroscope
  String gyro = "$GYRO,Gx," + String(gx) + ",Gy," + String(gy) + ",Gz," + String(gz);

  // _____________________
  // :::  Magnetometer :::

  // Read register Status 1 and wait for the DRDY: Data Ready
  //uint8_t ST1;
  //I2Cread(MAG_ADDRESS,0x02,1,&ST1);

  // Read magnetometer data
  uint8_t Mag[7];
  I2Cread(MAG_ADDRESS, 0x03, 7, Mag);

  // Create 16 bits values from 8 bits data

  // Magnetometer
  int16_t mx = (Mag[1] << 8 | Mag[0]) - _mx;
  int16_t my = (Mag[3] << 8 | Mag[2]) - _my;
  int16_t mz = (Mag[5] << 8 | Mag[4]) - _mz;

  // Magnetometer
  String compass = "$MAG,Mx," + String(mx) + ",My," + String(my) + ",Mz," + String(mz);


  //Determine Mode of Robot
  //Status = 1 to send data
  //Status = 2 to Calibrate data
  
  if (Status == 1)
  {
    Serial.println(NEMA);
    Serial.println(accel);
    Serial.println(gyro);
    Serial.println(compass);
    
    Status = 0;//reset status
  }

  if (Status == 2)
  {
    _ax += ax;
    _ay += ay;
    _az += az;

    _gx += gx;
    _gy += gy;
    _gz += gz;

    _mx += mx;
    _my += my;
    _mz += mz;

    Status = 0; //reset
  }

  // End of line
  //delay(50);
}
